# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from synprov.models.base_model_ import Model
from synprov import util


class Reference1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_version_id=None, target_id=None, _class=None, subclass=None):  # noqa: E501
        """Reference1 - a model defined in OpenAPI

        :param target_version_id: The target_version_id of this Reference1.  # noqa: E501
        :type target_version_id: str
        :param target_id: The target_id of this Reference1.  # noqa: E501
        :type target_id: str
        :param _class: The _class of this Reference1.  # noqa: E501
        :type _class: str
        :param subclass: The subclass of this Reference1.  # noqa: E501
        :type subclass: str
        """
        self.openapi_types = {
            'target_version_id': str,
            'target_id': str,
            '_class': str,
            'subclass': str
        }

        self.attribute_map = {
            'target_version_id': 'targetVersionId',
            'target_id': 'targetId',
            '_class': 'class',
            'subclass': 'subclass'
        }

        self._target_version_id = target_version_id
        self._target_id = target_id
        self.__class = _class
        self._subclass = subclass

    @classmethod
    def from_dict(cls, dikt) -> 'Reference1':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Reference_1 of this Reference1.  # noqa: E501
        :rtype: Reference1
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_version_id(self):
        """Gets the target_version_id of this Reference1.


        :return: The target_version_id of this Reference1.
        :rtype: str
        """
        return self._target_version_id

    @target_version_id.setter
    def target_version_id(self, target_version_id):
        """Sets the target_version_id of this Reference1.


        :param target_version_id: The target_version_id of this Reference1.
        :type target_version_id: str
        """
        if target_version_id is None:
            raise ValueError("Invalid value for `target_version_id`, must not be `None`")  # noqa: E501

        self._target_version_id = target_version_id

    @property
    def target_id(self):
        """Gets the target_id of this Reference1.


        :return: The target_id of this Reference1.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this Reference1.


        :param target_id: The target_id of this Reference1.
        :type target_id: str
        """
        if target_id is None:
            raise ValueError("Invalid value for `target_id`, must not be `None`")  # noqa: E501

        self._target_id = target_id

    @property
    def _class(self):
        """Gets the _class of this Reference1.


        :return: The _class of this Reference1.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this Reference1.


        :param _class: The _class of this Reference1.
        :type _class: str
        """

        self.__class = _class

    @property
    def subclass(self):
        """Gets the subclass of this Reference1.


        :return: The subclass of this Reference1.
        :rtype: str
        """
        return self._subclass

    @subclass.setter
    def subclass(self, subclass):
        """Sets the subclass of this Reference1.


        :param subclass: The subclass of this Reference1.
        :type subclass: str
        """

        self._subclass = subclass

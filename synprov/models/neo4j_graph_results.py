# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from synprov.models.base_model_ import Model
from synprov.models.neo4j_graph_data import Neo4jGraphData
from synprov import util


class Neo4jGraphResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns=None, data=None):  # noqa: E501
        """Neo4jGraphResults - a model defined in OpenAPI

        :param columns: The columns of this Neo4jGraphResults.  # noqa: E501
        :type columns: List[str]
        :param data: The data of this Neo4jGraphResults.  # noqa: E501
        :type data: List[Neo4jGraphData]
        """
        self.openapi_types = {
            'columns': List[str],
            'data': List[Neo4jGraphData]
        }

        self.attribute_map = {
            'columns': 'columns',
            'data': 'data'
        }

        self._columns = columns
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'Neo4jGraphResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Neo4jGraph_results of this Neo4jGraphResults.  # noqa: E501
        :rtype: Neo4jGraphResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this Neo4jGraphResults.


        :return: The columns of this Neo4jGraphResults.
        :rtype: List[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this Neo4jGraphResults.


        :param columns: The columns of this Neo4jGraphResults.
        :type columns: List[str]
        """

        self._columns = columns

    @property
    def data(self):
        """Gets the data of this Neo4jGraphResults.


        :return: The data of this Neo4jGraphResults.
        :rtype: List[Neo4jGraphData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Neo4jGraphResults.


        :param data: The data of this Neo4jGraphResults.
        :type data: List[Neo4jGraphData]
        """

        self._data = data

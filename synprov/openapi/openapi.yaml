openapi: 3.0.1
info:
  description: |
    This service provides a lightweight implementation of the [Synapse Activity services](https://docs.synapse.org/rest/#org.sagebionetworks.repo.web.controller.ActivityController), based on the [W3C PROV](https://www.w3.org/TR/prov-primer/) spec. It is designed to be mostly agnostic to the underlying data model or schema of any particular system, and thus relatively flexible for use by different clients.
  title: Provenance Service
  version: 0.4.0
servers:
- url: /rest/v1
tags:
- description: |
    \"An `Activity` is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.\" — [W3C](https://www.w3.org/TR/2013/REC-prov-dm-20130430/#section-entity-activity)
  name: Activities
- description: |
    \"An entity is a physical, digital, conceptual, or other kind of thing with some fixed aspects; entities may be real or imaginary.\" — [W3C](https://www.w3.org/TR/2013/REC-prov-dm-20130430/#section-entity-activity)

    A `Reference` is a record describing both the ID and *version* of an entity in some repository.
  name: References
- description: |
    \"An `Agent` is something that bears some form of responsibility for an activity taking place, for the existence of an entity, or for another agent's activity.\" — [W3C](https://www.w3.org/TR/2013/REC-prov-dm-20130430/#section-agents-attribution-association-delegation)
  name: Agents
paths:
  /activities:
    post:
      description: |-
        Create a new Activity.
      operationId: create_activity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityForm'
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
          description: Success — activity created
      summary: Create a new activity
      tags:
      - Activities
      x-codegen-request-body-name: body
      x-openapi-router-controller: synprov.controllers.activities_controller
  /activities/batch:
    post:
      description: |-
        Create multiple new Activities.
      operationId: create_activity_batch
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ActivityForm'
              type: array
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
          description: Success — activity created
      summary: Create multiple new activities
      tags:
      - Activities
      x-codegen-request-body-name: body
      x-openapi-router-controller: synprov.controllers.activities_controller
  /activities/graph:
    get:
      description: |
        Retrieve all nodes and relationships in the graph that pass filters.
      operationId: get_activities_graph
      parameters:
      - $ref: '#/components/parameters/sortParam'
      - $ref: '#/components/parameters/orderParam'
      - $ref: '#/components/parameters/limitParam'
      responses:
        200:
          $ref: '#/components/responses/200GraphFound'
      summary: Get provenance graph
      tags:
      - Activities
      x-openapi-router-controller: synprov.controllers.activities_controller
  /activities/{activityId}/used/{targetId}:
    delete:
      description: |
        Remove a reference from the list of 'used' entities in an Activity.
      operationId: delete_activity_used
      parameters:
      - description: activity ID
        explode: false
        in: path
        name: activityId
        required: true
        schema:
          type: string
        example: activity0
        style: simple
      - description: entity ID
        explode: false
        in: path
        name: targetId
        required: true
        schema:
          type: string
        example: resource0
        style: simple
      responses:
        204:
          description: Success — 'used' relationship deleted
      summary: Delete 'used' reference
      tags:
      - Activities
      x-openapi-router-controller: synprov.controllers.activities_controller
  /activities/{activityId}/used:
    put:
      description: |
        Add a reference to the list of 'used' entities in an Activity.
      operationId: add_activity_used
      parameters:
      - description: activity ID
        explode: false
        in: path
        name: activityId
        required: true
        schema:
          type: string
        example: activity0
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reference'
        required: true
      responses:
        201:
          description: Success — 'used' relationship created
      summary: Add 'used' reference
      tags:
      - Activities
      x-codegen-request-body-name: body
      x-openapi-router-controller: synprov.controllers.activities_controller
  /activities/byAgent/{userId}/graph:
    get:
      description: |
        Retrieve the nodes and relationships in a neighborhood around a specified user.
      operationId: get_agent_subgraph
      parameters:
      - description: user ID
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        example: user0
        style: simple
      - $ref: '#/components/parameters/sortParam'
      - $ref: '#/components/parameters/orderParam'
      - $ref: '#/components/parameters/limitParam'
      responses:
        200:
          $ref: '#/components/responses/200GraphFound'
      summary: Get subgraph connected to an agent
      tags:
      - Activities
      x-openapi-router-controller: synprov.controllers.activities_controller
  /activities/byReference/{targetId}/graph:
    get:
      description: |
        Retrieve the nodes and relationships in a neighborhood around a specified entity.
      operationId: get_reference_subgraph
      parameters:
      - description: entity ID
        explode: false
        in: path
        name: targetId
        required: true
        schema:
          type: string
        example: resource0
        style: simple
      - $ref: '#/components/parameters/directionParam'
      - $ref: '#/components/parameters/sortParam'
      - $ref: '#/components/parameters/orderParam'
      - $ref: '#/components/parameters/limitParam'
      responses:
        200:
          $ref: '#/components/responses/200GraphFound'
      summary: Get subgraph connected to an entity
      tags:
      - Activities
      x-openapi-router-controller: synprov.controllers.activities_controller
components:
  examples:
    activityNode:
      value:
        id: '149'
        labels:
        - Activity
        properties:
          createdAt: '2019-07-28T11:39:54Z'
          id: 17437146-b167-11e9-9ab3-4c32759a3015
          name: Shiny App PCA
    referenceStateNode:
      value:
        id: '152'
        labels:
        - Reference
        properties:
          class: Resource
          createdAt: '2019-07-28T11:39:54Z'
          id: 174bc6be-b167-11e9-9ef2-4c32759a3015
          name: PCA on TCGA breast cancer dataset
          subclass: State
          targetId: state0
          targetVersionId: '1'
    referenceFileNode:
      value:
        id: '151'
        labels:
        - Reference
        properties:
          class: Resource
          createdAt: '2019-07-28T11:39:54Z'
          id: 174b77d8-b167-11e9-ac4c-4c32759a3015
          name: TCGA BRCA Expression
          subclass: File
          targetId: resource0
          targetVersionId: '1'
    referenceToolNode:
      value:
        id: '150'
        labels:
        - Reference
        properties:
          class: Tool
          createdAt: '2019-07-28T11:39:54Z'
          id: 1749ddfe-b167-11e9-8cdc-4c32759a3015
          name: Explorer
          subclass: Tool
          targetId: tool0
          targetVersionId: '1'
    agentNode:
      value:
        id: '153'
        labels:
        - Agent
        properties:
          createdAt: '2019-07-28T11:39:54Z'
          id: 174c1134-b167-11e9-96de-4c32759a3015
          name: Sage Scientist
          userId: user0
    generatedEdge:
      value:
        endNode: '149'
        id: '161'
        linknum: 1
        properties:
          endNodeRole: None
          id: 17545718-b167-11e9-8db4-4c32759a3015
          startNodeRole: state
        source: '152'
        startNode: '152'
        target: '149'
        type:
        - WASGENERATEDBY
    associatedEdge:
      value:
        endNode: '153'
        id: '160'
        linknum: 1
        properties:
          endNodeRole: None
          id: 17527d42-b167-11e9-bd5a-4c32759a3015
          startNodeRole: None
        source: '149'
        startNode: '149'
        target: '153'
        type:
        - WASASSOCIATEDWITH
    usedFileEdge:
      value:
        endNode: '151'
        id: '141'
        linknum: 1
        properties:
          endNodeRole: None
          id: 17506cfa-b167-11e9-8725-4c32759a3015
          startNodeRole: None
        source: '149'
        startNode: '149'
        target: '151'
        type:
        - USED
    usedToolEdge:
      value:
        endNode: '150'
        id: '140'
        linknum: 1
        properties:
          endNodeRole: None
          id: 174d8768-b167-11e9-8493-4c32759a3015
          startNodeRole: None
        source: '149'
        startNode: '149'
        target: '150'
        type:
        - USED

  responses:
    200GraphFound:
      description: Found requested (sub)graph.
      content:
        application/json:
          schema:
            # oneOf:
            #   - $ref: '#/components/schemas/D3Graph'
            $ref: '#/components/schemas/Neo4jGraph'
    404NotFound:
      description: The specified resource was not found.
  parameters:
    formatParam:
      description: JSON structure to use for graph response
      explode: false
      in: query
      name: format
      required: false
      schema:
        default: d3
        enum:
        - d3
        - neo4j
        type: string
      style: form
    limitParam:
      description: maximum number of connected activities to return
      explode: false
      in: query
      name: limit
      required: false
      schema:
        default: 3
        format: int32
        maximum: 1000
        minimum: 1
        type: integer
      style: form
    directionParam:
      description: direction in which to collect connected activities
      explode: false
      in: query
      name: direction
      required: false
      schema:
        default: down
        enum:
        - up
        - down
        - both
        type: string
      style: form
    sortParam:
      description: logic by which to sort matched activities
      explode: false
      in: query
      name: sortBy
      required: false
      schema:
        default: created_at
        enum:
        - created_at
        type: string
      style: form
    orderParam:
      description: sort order (ascending or descending)
      explode: true
      in: query
      name: order
      required: false
      schema:
        default: desc
        enum:
        - asc
        - desc
        type: string
      style: form
  schemas:
    ProvNode:
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          format: date
          type: string
        createdBy:
          type: string
      required:
      - name
      type: object
    Activity:
      allOf:
      - $ref: '#/components/schemas/ProvNode'
      - example:
          name: Shiny App PCA
          class: Tool session
          description: |
            PCA was performed on TCGA breast cancer expression data within
            the Shiny 'Explorer' analysis tool. The state of the app was
            bookmarked and saved.
        properties:
          class:
            type: string
        title: Activity
        type: object
    Reference:
      allOf:
      - $ref: '#/components/schemas/ProvNode'
      - example:
          name: TCGA BRCA Expression
          role: 'dataToInput'
          targetId: resource0
          targetVersionId: '1'
          class: Resource
          subclass: File
        properties:
          targetVersionId:
            type: string
          targetId:
            type: string
          class:
            type: string
          subclass:
            type: string
        required:
        - targetId
        - targetVersionId
        title: Reference
        type: object
    Agent:
      allOf:
      - $ref: '#/components/schemas/ProvNode'
      - example:
          userId: user0
          name: Sage Scientist
          role: 'analyst'
        properties:
          userId:
            type: string
        required:
        - userId
        title: Agent
        type: object
    ActivityForm:
      example:
        name: Shiny App PCA
        class: Tool session
        description: |
          PCA was performed on TCGA breast cancer expression data within
          the Shiny 'Explorer' analysis tool. The state of the app was
          bookmarked and saved.
        agents:
        - userId: user0
          name: Sage Scientist
          role: 'analyst'
        used:
        - name: Explorer
          role: 'toolToExecute'
          targetId: tool0
          targetVersionId: '1'
          class: Tool
          subclass: Tool
        - name: TCGA BRCA Expression
          role: 'dataToInput'
          targetId: resource0
          targetVersionId: '1'
          class: Resource
          subclass: File
        generated:
        - name: PCA on TCGA breast cancer dataset
          role: 'state'
          targetId: state0
          targetVersionId: '1'
          class: Resource
          subclass: State
      properties:
        used:
          items:
            $ref: '#/components/schemas/Reference'
          type: array
        generated:
          items:
            $ref: '#/components/schemas/Reference'
          type: array
        agents:
          items:
            $ref: '#/components/schemas/Agent'
          type: array
        name:
          type: string
        description:
          type: string
        class:
          type: string
      title: ActivityForm
      type: object
    ProvRelationship:
      properties:
        id:
          format: uuid
          type: string
        startNode:
          type: string
        endNode:
          type: string
        type:
          enum:
          - WASASSOCIATEDWITH
          - WASGENERATEDBY
          - USED
          - WASATTRIBUTEDTO
          type: string
        startNodeRole:
          type: string
        endNodeRole:
          type: string
      type: object
    D3Graph:
      properties:
        nodes:
          items:
            $ref: '#/components/schemas/Node'
          type: array
        relationships:
          items:
            $ref: '#/components/schemas/Edge'
          type: array
      title: D3Graph
      type: object
    Neo4jGraph:
      description: |
        Note: '$ref' lines in example response are artifacts from OpenAPI schema.
      example:
        summary: Example response for a single activity
        results:
          columns:
            - Activity
            - Reference
            - Agent
          data:
            graph:
              nodes:
                - $ref: '#/components/examples/activityNode'
                - $ref: '#/components/examples/agentNode'
                - $ref: '#/components/examples/referenceFileNode'
                - $ref: '#/components/examples/referenceToolNode'
                - $ref: '#/components/examples/referenceStateNode'
              relationships:
                - $ref: '#/components/examples/generatedEdge'
                - $ref: '#/components/examples/associatedEdge'
                - $ref: '#/components/examples/usedFileEdge'
                - $ref: '#/components/examples/usedToolEdge'
      type: object
      title: Neo4jGraph
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              columns:
                type: array
                items:
                  type: string
                default:
                - Activity
                - Reference
                - Agent
              data:
                type: array
                items:
                  type: object
                  properties:
                    graph:
                      type: object
                      properties:
                        nodes:
                          items:
                            $ref: '#/components/schemas/Node'
                          type: array
                        relationships:
                          items:
                            $ref: '#/components/schemas/Edge'
                          type: array
    Node:
      example:
          $ref: '#/components/examples/activityNode'
      properties:
        id:
          type: string
        labels:
          items:
            type: string
          type: array
        properties:
          type: object
      title: Node
      type: object
    Edge:
      example:
        endNode: '149'
        id: '161'
        linknum: 1
        properties:
          endNodeRole: None
          id: 17545718-b167-11e9-8db4-4c32759a3015
          startNodeRole: state
        source: '152'
        startNode: '152'
        target: '149'
        type:
        - WASGENERATEDBY
      properties:
        id:
          type: string
        type:
          type: string
        startNode:
          type: string
        endNode:
          type: string
        properties:
          type: object
        source:
          type: string
        target:
          type: string
        linknum:
          format: int32
          type: integer
      title: Edge
      type: object

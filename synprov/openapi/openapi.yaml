openapi: 3.0.1
info:
  title: Provenance Service
  description: |
    This service provides a lightweight implementation of the [Synapse Activity services](https://docs.synapse.org/rest/#org.sagebionetworks.repo.web.controller.ActivityController), based on the [W3C PROV](https://www.w3.org/TR/prov-primer/) spec. It is designed to be mostly agnostic to the underlying data model or schema of any particular system, and thus relatively flexible for use by different clients.
  version: 0.2.0
servers:
- url: /rest/v1
tags:
- description: |
    \"An `Activity` is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.\" — [W3C](https://www.w3.org/TR/2013/REC-prov-dm-20130430/#section-entity-activity)
  name: Activities
- description: |
    \"An entity is a physical, digital, conceptual, or other kind of thing with some fixed aspects; entities may be real or imaginary.\" — [W3C](https://www.w3.org/TR/2013/REC-prov-dm-20130430/#section-entity-activity)

    A `Reference` is a record describing both the ID and *version* of an entity in some repository.
  name: References
- description: |
    \"An `Agent` is something that bears some form of responsibility for an activity taking place, for the existence of an entity, or for another agent's activity.\" — [W3C](https://www.w3.org/TR/2013/REC-prov-dm-20130430/#section-agents-attribution-association-delegation)
  name: Agents
paths:
  /activities:
    post:
      summary: Create a new activity
      description: |-
        Create a new Activity. If the passed Activity object contains a Used
        array, you must set the concreteType field of each Used subclass.
      operationId: create_activity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityForm'
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
          description: Success — activity created
      tags:
      - Activities
      x-codegen-request-body-name: body
      x-openapi-router-controller: synprov.controllers.activities_controller
  /activities/graph:
    get:
      summary: Get provenance graph
      description: >
        Retrieve all nodes and relationships in the graph that pass filters.
      operationId: get_activities_graph
      parameters:
        - $ref: '#/components/parameters/limitParam'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/D3Graph'
          description: OK
      tags:
      - Activities
      x-openapi-router-controller: synprov.controllers.activities_controller
  /agents/{id}/subgraph:
    get:
      summary: Get subgraph connected to an agent
      description: >
        Retrieve the nodes and relationships in a neighborhood around a specified user.
      operationId: get_agent_subgraph
      parameters:
        - name: id
          in: path
          description: user ID
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/limitParam'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/D3Graph'
          description: OK
      tags:
      - Agents
      x-openapi-router-controller: synprov.controllers.agents_controller
  /references/{id}/subgraph:
    get:
      summary: Get subgraph connected to an entity
      description: >
        Retrieve the nodes and relationships in a neighborhood around a specified entity.
      operationId: get_reference_subgraph
      parameters:
        - name: id
          in: path
          description: entity ID
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/directionParam'

      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/D3Graph'
          description: OK
      tags:
      - References
      x-openapi-router-controller: synprov.controllers.references_controller

components:
  schemas:
    ProvLabel:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date
        createdBy:
          type: string
    Activity:
      allOf:
        - $ref: '#/components/schemas/ProvLabel'
        - title: Activity
          type: object
          example:
            id: activityId
            name: name
            description: agent1 generates entity2 from entity1
          properties:
            class:
              type: string
    Reference:
      allOf:
        - $ref: '#/components/schemas/ProvLabel'
        - title: Reference
          type: object
          example:
            targetId: entityId
            targetVersionId: "1"
          required:
            - targetId
            - targetVersionId
          properties:
            targetVersionId:
              type: string
            targetId:
              type: string
    Agent:
      allOf:
        - $ref: '#/components/schemas/ProvLabel'
        - title: Agent
          type: object
          example:
            id: agentId
          required:
            - userId
          properties:
            userId:
              type: string
    ActivityForm:
      title: ActivityForm
      type: object
      example:
        generated:
        - role: role
          targetId: entity2
          targetVersionId: 1
        name: name
        description: agent1 generates entity2 from entity1
        id: id
        used:
        - role: role
          targetId: entity1
          targetVersionId: 1
        agents:
        - agentId: agent1
          role: role
      properties:
        used:
          items:
            $ref: '#/components/schemas/Reference'
          type: array
        generated:
          items:
            $ref: '#/components/schemas/Reference'
          type: array
        agents:
          items:
            $ref: '#/components/schemas/Agent'
          type: array
        name:
          type: string
        description:
          type: string
        class:
          type: string
    D3Graph:
      title: D3Graph
      type: object
      properties:
        nodes:
          items:
            $ref: '#components/schemas/Node'
          type: array
        relationships:
          items:
            $ref: '#components/schemas/Relationship'
          type: array
    Node:
      title: Node
      type: object
      properties:
        id:
          type: string
        labels:
          items:
            type: string
          type: array
        properties:
          type: object
    Relationship:
      title: Relationship
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        startNode:
          type: string
        endNode:
          type: string
        properties:
          type: object
        source:
          type: string
        target:
          type: string
        linknum:
          type: integer
          format: int32
  parameters:
    limitParam:
      name: limit
      in: query
      description: maximum number of nodes to return
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
    directionParam:
      name: direction
      in: query
      description: direction in which to collect nodes
      schema:
        type: string
        enum:
          - up
          - down
          - both

  responses:
    404NotFound:
      description: The specified resource was not found.
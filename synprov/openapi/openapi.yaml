openapi: 3.0.1
info:
  description: |
    This service provides a lightweight implementation of the [Synapse Activity services](https://docs.synapse.org/rest/#org.sagebionetworks.repo.web.controller.ActivityController), based on the [W3C PROV](https://www.w3.org/TR/prov-primer/) spec. It is designed to be mostly agnostic to the underlying data model or schema of any particular system, and thus relatively flexible for use by different clients.
  title: Provenance Service
  version: 0.3.0
servers:
- url: /rest/v1
tags:
- description: |
    \"An `Activity` is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.\" — [W3C](https://www.w3.org/TR/2013/REC-prov-dm-20130430/#section-entity-activity)
  name: Activities
- description: |
    \"An entity is a physical, digital, conceptual, or other kind of thing with some fixed aspects; entities may be real or imaginary.\" — [W3C](https://www.w3.org/TR/2013/REC-prov-dm-20130430/#section-entity-activity)

    A `Reference` is a record describing both the ID and *version* of an entity in some repository.
  name: References
- description: |
    \"An `Agent` is something that bears some form of responsibility for an activity taking place, for the existence of an entity, or for another agent's activity.\" — [W3C](https://www.w3.org/TR/2013/REC-prov-dm-20130430/#section-agents-attribution-association-delegation)
  name: Agents
paths:
  /activities:
    post:
      description: |-
        Create a new Activity. If the passed Activity object contains a Used
        array, you must set the concreteType field of each Used subclass.
      operationId: create_activity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityForm'
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
          description: Success — activity created
      summary: Create a new activity
      tags:
      - Activities
      x-codegen-request-body-name: body
      x-openapi-router-controller: synprov.controllers.activities_controller
  /activities/graph:
    get:
      description: |
        Retrieve all nodes and relationships in the graph that pass filters.
      operationId: get_activities_graph
      parameters:
      - $ref: '#/components/parameters/sortParam'
      - $ref: '#/components/parameters/orderParam'
      - $ref: '#/components/parameters/limitParam'
      responses:
        200:
          $ref: '#/components/responses/200GraphFound'
      summary: Get provenance graph
      tags:
      - Activities
      x-openapi-router-controller: synprov.controllers.activities_controller
  /activities/byAgent/{id}/graph:
    get:
      description: |
        Retrieve the nodes and relationships in a neighborhood around a specified user.
      operationId: get_agent_subgraph
      parameters:
      - description: user ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        example: UserID_1
        style: simple
      - $ref: '#/components/parameters/sortParam'
      - $ref: '#/components/parameters/orderParam'
      - $ref: '#/components/parameters/limitParam'
      responses:
        200:
          $ref: '#/components/responses/200GraphFound'
      summary: Get subgraph connected to an agent
      tags:
      - Activities
      x-openapi-router-controller: synprov.controllers.activities_controller
  /activities/byReference/{id}/graph:
    get:
      description: |
        Retrieve the nodes and relationships in a neighborhood around a specified entity.
      operationId: get_reference_subgraph
      parameters:
      - description: entity ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        example: TargetID_1
        style: simple
      - $ref: '#/components/parameters/directionParam'
      - $ref: '#/components/parameters/sortParam'
      - $ref: '#/components/parameters/orderParam'
      - $ref: '#/components/parameters/limitParam'
      responses:
        200:
          $ref: '#/components/responses/200GraphFound'
      summary: Get subgraph connected to an entity
      tags:
      - Activities
      x-openapi-router-controller: synprov.controllers.activities_controller
components:
  responses:
    200GraphFound:
      description: Found requested (sub)graph.
      content:
        application/json:
          schema:
            # oneOf:
            #   - $ref: '#/components/schemas/D3Graph'
            $ref: '#/components/schemas/Neo4jGraph'
    404NotFound:
      description: The specified resource was not found.
  parameters:
    formatParam:
      description: JSON structure to use for graph response
      explode: false
      in: query
      name: format
      required: false
      schema:
        default: d3
        enum:
        - d3
        - neo4j
        type: string
      style: form
    limitParam:
      description: maximum number of connected activities to return
      explode: false
      in: query
      name: limit
      required: false
      schema:
        default: 3
        format: int32
        maximum: 1000
        minimum: 1
        type: integer
      style: form
    directionParam:
      description: direction in which to collect connected activities
      explode: false
      in: query
      name: direction
      required: false
      schema:
        default: down
        enum:
        - up
        - down
        - both
        type: string
      style: form
    sortParam:
      description: logic by which to sort matched activities
      explode: false
      in: query
      name: sortBy
      required: false
      schema:
        default: created_at
        enum:
        - created_at
        type: string
      style: form
    orderParam:
      description: sort order (ascending or descending)
      explode: true
      in: query
      name: order
      required: false
      schema:
        default: desc
        enum:
        - asc
        - desc
        type: string
      style: form
  schemas:
    ProvNode:
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          format: date
          type: string
        createdBy:
          type: string
      required:
      - name
      type: object
    Activity:
      allOf:
      - $ref: '#/components/schemas/ProvNode'
      - example:
          id: activityId
          name: name
          description: agent1 generates entity2 from entity1
        properties:
          class:
            type: string
        title: Activity
        type: object
    Reference:
      allOf:
      - $ref: '#/components/schemas/ProvNode'
      - example:
          targetId: entityId
          targetVersionId: "1"
        properties:
          targetVersionId:
            type: string
          targetId:
            type: string
          class:
            type: string
          subclass:
            type: string
        required:
        - targetId
        - targetVersionId
        title: Reference
        type: object
    Agent:
      allOf:
      - $ref: '#/components/schemas/ProvNode'
      - example:
          id: agentId
        properties:
          userId:
            type: string
        required:
        - userId
        title: Agent
        type: object
    ActivityForm:
      example:
        generated:
        - role: role
          targetId: entity2
          targetVersionId: 1
        name: name
        description: agent1 generates entity2 from entity1
        id: id
        used:
        - role: role
          targetId: entity1
          targetVersionId: 1
        agents:
        - agentId: agent1
          role: role
      properties:
        used:
          items:
            $ref: '#/components/schemas/Reference'
          type: array
        generated:
          items:
            $ref: '#/components/schemas/Reference'
          type: array
        agents:
          items:
            $ref: '#/components/schemas/Agent'
          type: array
        name:
          type: string
        description:
          type: string
        class:
          type: string
      title: ActivityForm
      type: object
    ProvRelationship:
      properties:
        id:
          format: uuid
          type: string
        startNode:
          type: string
        endNode:
          type: string
        type:
          enum:
          - WASASSOCIATEDWITH
          - WASGENERATEDBY
          - USED
          - WASATTRIBUTEDTO
          type: string
        startNodeRole:
          type: string
        endNodeRole:
          type: string
      type: object
    D3Graph:
      example:
        relationships:
        - '{}'
        - '{}'
        nodes:
        - '{}'
        - '{}'
      properties:
        nodes:
          items:
            $ref: '#/components/schemas/Node'
          type: array
        relationships:
          items:
            $ref: '#/components/schemas/Edge'
          type: array
      title: D3Graph
      type: object
    Neo4jGraph:
      type: object
      title: Neo4jGraph
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              columns:
                type: array
                items:
                  type: string
                default:
                - Activity
                - Reference
                - Agent
              data:
                type: array
                items:
                  type: object
                  properties:
                    graph:
                      type: object
                      properties:
                        nodes:
                          items:
                            $ref: '#/components/schemas/Node'
                          type: array
                        relationships:
                          items:
                            $ref: '#/components/schemas/Edge'
                          type: array
    Node:
      properties:
        id:
          type: string
        labels:
          items:
            type: string
          type: array
        properties:
          type: object
      title: Node
      type: object
    Edge:
      properties:
        id:
          type: string
        type:
          type: string
        startNode:
          type: string
        endNode:
          type: string
        properties:
          type: object
        source:
          type: string
        target:
          type: string
        linknum:
          format: int32
          type: integer
      title: Edge
      type: object

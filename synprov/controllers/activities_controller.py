import connexion
import six
import uuid
import humps

from py2neo import Graph, Node, NodeMatcher

from synprov.config import neomod
from synprov.graphmodels import Activity, Reference, Agent


graph = Graph(neomod.neo.db.url)


def create_activity(body):  # noqa: E501
    """Create a new.

    Create a new Activity. If the passed Activity object contains a Used array, you must set the concreteType field of each Used subclass. # noqa: E501

    :param body:
    :type body: dict | bytes

    :rtype: Activity
    """
    activity_props = {p: v for p, v in body.items()
                      if p not in ['used', 'generated', 'agents']}
    print(activity_props)
    act = Activity(**humps.decamelize(activity_props))
    act.activity_id = uuid.uuid4().hex
    act.save()

    for u in body['used']:
        ref = Reference(**humps.decamelize(u))
        ref.hash()
        try:
            ref.save()
        except UniqueProperty:
            ref = Reference.nodes.get(reference_hash=ref.reference_hash)
        act.used.connect(ref)

    for g in body['generated']:
        ref = Reference(**humps.decamelize(g))
        ref.hash()
        try:
            ref.save()
        except UniqueProperty:
            ref = Reference.nodes.get(reference_hash=ref.reference_hash)
        ref.activity.connect(act)

    for a in body['agents']:
        agt = Agent(**humps.decamelize(a))
        try:
            agt.save()
        except UniqueProperty:
            agt = Agent.nodes.get(agent_id=Agent.agent_id)
        act.agents.connect(agt)


    matcher = NodeMatcher(graph)
    activity = matcher.match('Activity',
                             activity_id={act.activity_id}).first()
    return activity


def delete_activity(id):  # noqa: E501
    """Delete an.

    Delete an Activity # noqa: E501

    :param id: The id of activity to delete.
    :type id: str

    :rtype: file
    """
    return 'Not Implemented', 501


def get_activity(id):  # noqa: E501
    """Get an existing.

    Get an existing Activity # noqa: E501

    :param id: The ID of the activity to fetch.
    :type id: str

    :rtype: Activity
    """
    matcher = NodeMatcher(graph)
    activity = matcher.match('Activity',
                             activity_id={id}).first()
    return activity


def get_activity_used(id):  # noqa: E501
    """Get used by an existing.

    Get entities used by an existing Activity # noqa: E501

    :param id: The ID of the activity to fetch.
    :type id: str

    :rtype: List[Reference]
    """
    used = graph.run(
        '''
        MATCH (refs)<-[:USED]-(a:Activity {activity_id: {a_id}})
        RETURN refs
        ''',
        a_id=id
    )
    return [r['refs'] for r in used.data()]


def get_activity_generated(id):  # noqa: E501
    """Get generated by an existing.

    Get entities generated by an existing Activity # noqa: E501

    :param id: The ID of the activity to fetch.
    :type id: str

    :rtype: List[Reference]
    """
    generated = graph.run(
        '''
        MATCH (refs)-[:WASGENERATEDBY]->(a:Activity {activity_id: {a_id}})
        RETURN refs
        ''',
        a_id=id
    )
    return [r['refs'] for r in generated.data()]


def get_activity_agents(id):  # noqa: E501
    """Get agents for an existing.

    Get agents associated with an existing Activity # noqa: E501

    :param id: The ID of the activity to fetch.
    :type id: str

    :rtype: List[Agent]
    """
    agents = graph.run(
        '''
        MATCH (agts)<-[:WASASSOCIATEDWITH]->(a:Activity {activity_id: {a_id}})
        RETURN agts
        ''',
        a_id=id
    )
    return [r['agts'] for r in agents.data()]


def list_activities():  # noqa: E501
    """.

    List Activities # noqa: E501


    :rtype: List[Activity]
    """
    return 'Not Implemented', 501


def update_activity(id, body=None):  # noqa: E501
    """Update an.

    Update an Activity # noqa: E501

    :param id: The id of the activity to update.
    :type id: str
    :param body: Update an Activity
    :type body: dict | bytes

    :rtype: Activity
    """
    return 'Not Implemented', 501

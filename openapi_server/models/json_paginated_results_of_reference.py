# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.json_reference import JsonReference
from openapi_server import util

from openapi_server.models.json_reference import JsonReference  # noqa: E501

class JsonPaginatedResultsOfReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, results=None, effective_schema=None, total_number_of_results=None):  # noqa: E501
        """JsonPaginatedResultsOfReference - a model defined in OpenAPI

        :param results: The results of this JsonPaginatedResultsOfReference.  # noqa: E501
        :type results: List[JsonReference]
        :param effective_schema: The effective_schema of this JsonPaginatedResultsOfReference.  # noqa: E501
        :type effective_schema: str
        :param total_number_of_results: The total_number_of_results of this JsonPaginatedResultsOfReference.  # noqa: E501
        :type total_number_of_results: int
        """
        self.openapi_types = {
            'results': List[JsonReference],
            'effective_schema': str,
            'total_number_of_results': int
        }

        self.attribute_map = {
            'results': 'results',
            'effective_schema': 'effectiveSchema',
            'total_number_of_results': 'totalNumberOfResults'
        }

        self._results = results
        self._effective_schema = effective_schema
        self._total_number_of_results = total_number_of_results

    @classmethod
    def from_dict(cls, dikt) -> 'JsonPaginatedResultsOfReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The json_PaginatedResultsOfReference of this JsonPaginatedResultsOfReference.  # noqa: E501
        :rtype: JsonPaginatedResultsOfReference
        """
        return util.deserialize_model(dikt, cls)

    @property
    def results(self):
        """Gets the results of this JsonPaginatedResultsOfReference.

          # noqa: E501

        :return: The results of this JsonPaginatedResultsOfReference.
        :rtype: List[JsonReference]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this JsonPaginatedResultsOfReference.

          # noqa: E501

        :param results: The results of this JsonPaginatedResultsOfReference.
        :type results: List[JsonReference]
        """

        self._results = results

    @property
    def effective_schema(self):
        """Gets the effective_schema of this JsonPaginatedResultsOfReference.

          # noqa: E501

        :return: The effective_schema of this JsonPaginatedResultsOfReference.
        :rtype: str
        """
        return self._effective_schema

    @effective_schema.setter
    def effective_schema(self, effective_schema):
        """Sets the effective_schema of this JsonPaginatedResultsOfReference.

          # noqa: E501

        :param effective_schema: The effective_schema of this JsonPaginatedResultsOfReference.
        :type effective_schema: str
        """

        self._effective_schema = effective_schema

    @property
    def total_number_of_results(self):
        """Gets the total_number_of_results of this JsonPaginatedResultsOfReference.

          # noqa: E501

        :return: The total_number_of_results of this JsonPaginatedResultsOfReference.
        :rtype: int
        """
        return self._total_number_of_results

    @total_number_of_results.setter
    def total_number_of_results(self, total_number_of_results):
        """Sets the total_number_of_results of this JsonPaginatedResultsOfReference.

          # noqa: E501

        :param total_number_of_results: The total_number_of_results of this JsonPaginatedResultsOfReference.
        :type total_number_of_results: int
        """

        self._total_number_of_results = total_number_of_results
